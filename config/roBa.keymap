#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W         &kp E           &kp R                      &kp T                                                            &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A           &kp S         &kp D           &kp F                      &kp G             &kp LS(LG(S))               &kp DOUBLE_QUOTES  &kp H      &kp J  &kp K      &kp L    &kp ENTER
&kp Z           &kp X         &kp C           &kp V                      &kp B             &kp MINUS                   &kp QUESTION       &kp N      &kp M  &kp COMMA  &kp DOT  &kp BACKSPACE
&kp LEFT_SHIFT  &kp LEFT_ALT  &kt LANGUAGE_5  &lt_to_layer_0 6 LEFT_WIN  &lt 3 LANGUAGE_5  &lt_to_layer_0 2 SPACE      &mkp RCLK          &mkp LCLK                             &kp LEFT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp MINUS       &kp PLUS      &mt LS(F7) KP_NUMBER_7  &mt LS(F8) KP_NUMBER_8  &mt LS(F9) KP_NUMBER_9                                                &kp CARET      &kp TILDE    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH
&kp SLASH       &kp ASTERISK  &mt LS(F4) KP_NUMBER_4  &mt LS(F5) KP_NUMBER_5  &mt LS(F6) KP_NUMBER_6  &kp LC(LA(KP_NUMBER_0))      &kp AT_SIGN      &kp HASH       &kp PERCENT  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE
&kp LEFT_SHIFT  &kp EQUAL     &mt LS(F1) KP_NUMBER_1  &mt LS(F2) KP_NUMBER_2  &mt LS(F3) KP_NUMBER_3  &kp UNDERSCORE               &kp EXCLAMATION  &kp AMPERSAND  &kp COLON    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp NON_US_BACKSLASH
&trans          &trans        &kp KP_NUMBER_0         &trans                  &trans                  &trans                       &trans           &trans                                                                   &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &kp ESC         &kp LC(LG(LEFT))  &kp UP_ARROW  &kp LC(LG(RIGHT))                      &trans  &trans  &trans  &trans  &trans
&trans  &kp HOME        &kp LEFT          &kp DOWN      &kp RIGHT          &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_SHIFT  &trans            &trans        &trans             &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans          &trans            &trans        &trans             &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
